name: Docker Build & Redeploy on EC2

on:
  push:
    branches: ["main"]
  workflow_dispatch:
        

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    environment: 
      name: non-prod  
    env:
      AWS_REGION: "us-east-1"
      ECR_REPO_NAME: myapp
      IMAGE_TAG: latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Login to AWS ECR
        uses: aws-actions/amazon-ecr-login@v2
        with:
          region: ${{ env.AWS_REGION }}

      - name: Build Docker Image
        run: docker build -t myapp:$IMAGE_TAG .
      
      - name: Tag Docker Image for ECR
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          docker tag myapp:$IMAGE_TAG $ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO_NAME:$IMAGE_TAG

      - name: Push Docker Image to ECR
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          docker push $ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO_NAME:$IMAGE_TAG

  trigger-ec2-startup:
    runs-on: ubuntu-latest
    needs: build-and-push
    name: non-prod  
    environment: 
      name: non-prod  
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-1"
          
      - name: Login to AWS ECR
        uses: aws-actions/amazon-ecr-login@v2
        with:
          region: ${{ env.AWS_REGION }}
          
      - name: Trigger EC2 startup script via SSM
        run: |
          echo "Fetching running EC2 instances..."
          INSTANCE_IDS=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=myapp-ec2-*" "Name=instance-state-name,Values=running" \
            --query "Reservations[*].Instances[*].InstanceId" \
            --output text)
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          
          for instance in $INSTANCE_IDS; do
            echo "Triggering startup script on $instance..."
            aws ssm send-command \
              --targets "Key=instanceIds,Values=$INSTANCE_IDS" \
              --document-name "AWS-RunShellScript" \
              --comment "Update Docker container" \
              --parameters 'commands=[
                "docker stop myapp || true",
                "docker rm myapp || true",
                "aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin '"$ACCOUNT_ID"'.dkr.ecr.us-east-1.amazonaws.com",
                "docker run -d --name myapp -p 80:5000 '"$ACCOUNT_ID"'.dkr.ecr.'"$AWS_REGION"'.amazonaws.com/myapp:latest"
              ]'
          done